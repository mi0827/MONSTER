#include "src/WinMain.h"
#include "BGM.h"

//---------------------------------------------------------------------------
//  BGM用の終了処理
//---------------------------------------------------------------------------
BGM::~BGM()
{
	// 終わったときに終了処理を呼ぶ
	BGM_Delete();
}

//---------------------------------------------------------------------------
//  BGM用の配列を作る関数
//---------------------------------------------------------------------------
void BGM::BGM_ContainerNew(int size)
{
	// BGM分の配列の確保
	m_bgm_container = new int[size];
}

//---------------------------------------------------------------------------
//  BGMの読み込み用関数
//---------------------------------------------------------------------------
void BGM::Load_BGM(const char name[256],int No)
{
	// BGMのデータを読み込む
	m_bgm_container[No] = LoadSoundMem(name);
}

//---------------------------------------------------------------------------
//  BGMの再生用関数
//---------------------------------------------------------------------------
void BGM::Play_BGM(int type, bool loop, int No)
{
	// BGMの再生
	PlaySoundMem(m_bgm_container[No], type, loop);
}

//---------------------------------------------------------------------------
//  BGMのボリューム変更用関数
//---------------------------------------------------------------------------
void BGM::BGM_ChangeVolume(int bgm_volume, int size)
{
	// BGMの数分ボリュームを変更する
	for (int i = 0; i < size; ++i) 
	{
		ChangeVolumeSoundMem(bgm_volume, m_bgm_container[i]);
	}
}

//---------------------------------------------------------------------------
//  BGMを止める用関数
//---------------------------------------------------------------------------
void BGM::Stop_BGM(int No)
{
	StopSoundMem(m_bgm_container[No]);
}

//---------------------------------------------------------------------------
//  BGMが再生中かを返す用関数
//---------------------------------------------------------------------------
bool BGM::Playing_BGM(int No)
{
	int playing; // 再生中かの番号を入れる用の変数
	// 再生中か調べる
	// 再生中          ：  １
	// 再生されていない：  ０
	// エラー          ：−１
	playing = CheckSoundMem(m_bgm_container[No]);
	if (playing == 1) {
		return true;
	}
	return false;
	
}

//---------------------------------------------------------------------------
// BGMのデリート（配列の解放）
//---------------------------------------------------------------------------
void BGM::BGM_Delete()
{
	InitSoundMem();        // 読み込んだBGMの削除
	delete[] m_bgm_container;
}
