#include "src/WinMain.h"
#include "src/System/Random.h"
#include "src/System/Vector3.h"
#include "src/System/Vector2.h"
#include "src/System/Transform.h"

#include "src/Model/Model.h"
#include "src/Animation/Animation.h"

#include "src/Collision/BoxCollision.h"
#include "src/Collision/CapsuleCollision.h"
#include "src/Hit/Hit.h"

#include "src/System/UIBar.h"
#include "src/Effect/Effect.h"
#include "src/Sound/Sound.h"

#include "src/Action/Combo.h"
#include "src/System/Move.h"
#include "src/Character/CharacterBase.h"
#include "src/Character/SamplePlayer.h"
#include "src/Character/Hero.h"
#include "src/Character/Receptionist.h"

#include "src/Field/FieldBase.h"
#include "src/Field/HitField.h" 
#include "src/Field/TitleField.h"
#include "src/Field/Field.h"

#include "src/Camera.h"
#include "src/System/Text.h"
#include "Base/Scene_Base.h"
#include "QuestAreaScene.h"


//------------------------------------------
// コンストラクタ
//------------------------------------------
QuestAreaScene::QuestAreaScene()
{
}

//------------------------------------------
// デストラクタ
//------------------------------------------
QuestAreaScene::~QuestAreaScene()
{

	delete[] m_landmark_text;
}

//------------------------------------------
// 初期処理
//------------------------------------------
void QuestAreaScene::Init()
{
	// ベースクラスで初期化しておきたいものの初期化
	BaseInit();

	// フィールドの初期化
	m_field_1.Init();

	// カメラの初期設定
	camera.PlayFieldInit();

	PlayerInit(hero);
	// プレイヤーの初期設定 
	m_player->Init();
	// プレイヤーの座標の設定
	m_player->SetCharacterPos({ 0.0f, 0.0f,250.0f });
	// プレイヤーの向きの設定
	m_player->SetCharacterRot({ 0.0f,-180.0f,0.0f });

	// カメラの向きの設定
	camera.SetCameraRot(m_player->m_transform.rot);

	// 受付嬢の初期設定
	receptionist.Init();
	// 受付嬢と話せるエリアの設定
	InitArea();
	// シャドーマップの設定
	ShadowMapInit();
	// 現在のシーンの設定(クエスト受注シーン)
	m_now_scene = QuestArea;

	// テキストの読み込み
	m_quest_text.LoadText("Data/Text/Quest.txt", quest_max);
	m_quest_area_text.LoadText("Data/Text/QuestAreaStory.txt", story_max);
	m_reception_text.LoadText("Data/Text/QuestReception.txt", teception_max);
}


//------------------------------------------
// 更新処理
//------------------------------------------
void QuestAreaScene::Update()
{
	switch (m_turn)
	{
	case Main:
		// カメラの更新処理
		camera.MouseCamera(&m_player->m_transform.pos);
		// メインで行う処理をこのシーンの状態に合わせて処理を分け実行する関数
		QuestAreaUpdate();

		break;
	case FadeOut:
		// フェードアウトの処理
		FadeOutSceneChange(Battle);
		break;
	}
}

//------------------------------------------
// 描画処理
//------------------------------------------
void QuestAreaScene::Draw()
{
	// シャドーマップのエリアのセット
	SetShadowMapArea(m_shadowMap_handle_1, m_player->m_transform.pos);
	SetShadowMapArea(m_shadowMap_handle_2, receptionist.m_transform.pos);
	//-------------------------------------------------------------
		// シャドウマップの作成（ここで各オブジェクトのシャドーマップの設定）
		//-------------------------------------------------------------
		// シャドウマップへの描画の準備
	ShadowMap_DrawSetup(m_shadowMap_handle_1);
	{
		// プレイヤーの描画処理
		m_player->Draw();
	}
	ShadowMap_DrawSetup(m_shadowMap_handle_2);
	{
		receptionist.Draw();
	}
	ShadowMap_DrawSetup(m_shadowMap_handle);
	{
		// フィールドの描画
		m_field_1.Draw();
	}

	// シャドウマップへの描画を終了
	ShadowMap_DrawEnd();

	//-------------------------------------------------------------
	// 各モデルの描画
	//-------------------------------------------------------------

	// バックバッファに描画する
	SetDrawScreen(DX_SCREEN_BACK);

	// カメラの描画処理
	camera.Draw();
	// 空の描画
	SkyDraw();

	// 描画に使用するシャドウマップを設定
	SetUseShadowMap(1, m_shadowMap_handle_1);
	{
		m_player->Draw();
		// 受付嬢の描画
		receptionist.Draw();
	}
	SetUseShadowMap(2, m_shadowMap_handle_2);
	{
		receptionist.Draw();
	}
	SetUseShadowMap(0, m_shadowMap_handle);
	{
		// プレイヤーの描画処理
		m_player->Draw();

		// 受付嬢の描画
		receptionist.Draw();
		// シャドウマップへキャラクターモデルの描画
		m_field_1.Draw();

	}
	UseShadowMapSet();



	switch (secen_mode_num)
	{
	case normal:// 会話していない状態
		ModeNormalDraw();
		break;
	case convo: // 会話中
		ConvoDraw();
		break;
	case accepting_quest: // クエストを受けている状態
		AcceptingQuestDraw();
		break;
	}
	// フェードの描画処理
	FadeDraw();
}

//------------------------------------------
// 終了処理
//------------------------------------------
void QuestAreaScene::Exit()
{
	//　シャドーマップの削除
	ExitShadowMap();

	// プレイヤーの終了処理
	m_player->Exit();
}

//------------------------------------------
// フィールドとキャラクターの当たり判定
//------------------------------------------
void QuestAreaScene::HitField()
{

	// フィールドの地面モデルとプレイヤーの当たり判定
	HitGroundCharacter(&m_player->m_transform.pos, &m_field_1.m_field_model);
	// 受付嬢
	HitGroundCharacter(&receptionist.m_transform.pos, &m_field_1.m_field_model);


	// 木のオブジェクトとプレイヤーの当たり判定
	// なぜか２本だけ当たり判定がどうしない
	for (int i = 0; i < m_field_1.TREE_MAX; i++)
	{
		// モンスターとプレイヤーの移動の当たり判定
		if (CheckCapsuleHit(m_field_1.m_hit_tree[i], m_player->m_body))
		{
			m_player->m_move.Move_Hit_Capsule(&m_player->m_transform.pos, m_player->m_body.m_capsule.radius, &m_field_1.m_hit_tree[i]);
		}
	}

	// プレイヤーとフィールドを囲ってる四角との当たり判定
	for (int i = 0; i < m_field_1.AROUND_MAX; i++)
	{
		if (CheckBoxHit3D(m_player->m_transform.pos, m_player->m_move_hit_size,
			m_field_1.m_hit_around[i].m_box.hit_pos, m_field_1.m_hit_around[i].m_box.half_size))
		{
			m_player->MoveHitUpdate(&m_field_1.m_hit_around[i]);
		}
	}

}

//------------------------------------------
// オプションメニューでもらってきた値を反映する関数
//------------------------------------------
void QuestAreaScene::OptionValuesReflect(int bgm, int se, int mouse)
{
	// カメラの感度設定
	camera.SetCameraSensi(mouse);
	// キャラクターのサウンドの調整
	m_player->m_se.SetSoundVolume(se);
}

//------------------------------------------
// 話せるようになるエリアの設定
//------------------------------------------
void QuestAreaScene::InitArea()
{
	// カプセル座標は受付嬢と同じ座標にする
	Vector3 pos = receptionist.m_transform.pos;
	Vector3 pos2 = { 0.0f, 60.0f, 0.0f };
	// 半径の設定
	float r = AREA_FIELD_R;
	// カプセルの作成
	m_area.CreateCapsule(pos, pos2, r);
}

//------------------------------------------
// 話せるようになるエリアの設定
//------------------------------------------
void QuestAreaScene::LandMarkUpdate()
{
	// カメラの向きを取得する
	m_camera_rot = camera.GetCameraRot();

	// 文字列の描画のための設定
	for (int i = 0; i < text_max; i++)
	{
		// 座標変換
		VECTOR pos = DrawStringWrold(receptionist.m_transform.pos, m_landmark_text[i].shift_pos);
		// 描画座用に変換
		m_landmark_text[i].draw_pos.VSet(pos);

		// 変換したスクリーン座標のZの値が0.0 ~ 1.0 なら描画していい
		if (i == f_text)
		{
			// 描画したい文字列がF : 話すの場合
			// 話していいエリアに入っていないと描画できないようにする
			if (m_area_hit)
			{
				// カメラの画角内稼働かによって描画しない
				// 画角内
				if (pos.z > 0.0f && pos.z < 1.0f)
				{
					// 描画する
					m_landmark_text[i].draw_flag = true;
				}
				else // 画面がい
				{
					// 描画しない
					m_landmark_text[i].draw_flag = false;
				}
			}
			else // 範囲がいでも描画できない
			{
				m_landmark_text[i].draw_flag = false;
			}
		}
		else // 指定のテキスト以外は
		{
			// カメラの画角内稼働かによって描画しない
			if (pos.z > 0.0f && pos.z < 1.0f)
			{
				// 描画する
				m_landmark_text[i].draw_flag = true;
			}
			else
			{
				// 描画しない
				m_landmark_text[i].draw_flag = false;
			}
		}
	}
}

//------------------------------------------
// このシーンの状態に合わせて適切な処理をさせる関数
//------------------------------------------
void QuestAreaScene::QuestAreaUpdate()
{
	switch (secen_mode_num)
	{
	case normal:// 会話していない状態
		ModeNormalUpdate();
		break;
	case convo: // 会話中
		ConvoUpdate();

		break;
	case accepting_quest: // クエストを受けている状態
		AcceptingQuestUpdate();
		break;
	}
}

//------------------------------------------
// 会話していない状態の更新処理
//------------------------------------------
void QuestAreaScene::ModeNormalUpdate()
{
	// カメラの向きを取得する
	m_camera_rot = camera.GetCameraRot();

	// プレイヤーの更新処理
	m_player->Update(&m_camera_rot);

	// 受付嬢のの更新処理
	receptionist.Update();

	// 受付嬢とプレイヤーの移動の当たり判定
	if (CheckCapsuleHit(receptionist.m_hit_body, m_player->m_body))
	{
		m_player->m_move.Move_Hit_Capsule(&m_player->m_transform.pos, m_player->m_body.m_capsule.radius, &receptionist.m_hit_body);
	}
	// フィールドとキャラクターの当たり判定
	HitField();
	// 目印を写すかの処理
	LandMarkUpdate();
	// プレイヤーが受付嬢と話せる範囲に入ったかの確認
	if (CheckCapsuleHit(m_area, m_player->m_body))
	{
		// Xキーを押された時にシーンの変更をする（今だけの仮）
		if (PushHitKey(KEY_INPUT_F))
		{
			// このシーンの状態を会話パートに移動する
			secen_mode_num = convo;
			// テキストの行をリセットする
			m_text_line_num = 0;
		}
		// 話せるエリアに入ったからフラグを上げる
		m_area_hit = true;
	}
	else
	{
		// 範囲外にいるときはフラグを下げる
		m_area_hit = false;
	}
}

//------------------------------------------
// 会話パートの更新処理
//------------------------------------------
void QuestAreaScene::ConvoUpdate()
{
	// マウスの右クリックかスペースキーで会話を進める
	if (PushMouseInput(MOUSE_INPUT_LEFT)|| PushHitKey(KEY_INPUT_SPACE))
	{
		m_text_line_num++;
	}
	// テキストが一行進んだら
	if (m_text_line_num == 1)
	{
		// クエストモードに移行する
		secen_mode_num = accepting_quest;
		m_text_line_num = 0;
	}

	//if (? ? ? )
	{
		// このシーンの状態をクエスト受注に移動する
		//secen_mode_num = accepting_quest;
	}
}

//------------------------------------------
// クエストを受けているときの更新処理
//------------------------------------------
void QuestAreaScene::AcceptingQuestUpdate()
{

	if (PushMouseInput(MOUSE_INPUT_LEFT) || PushHitKey(KEY_INPUT_SPACE))
	{
		m_text_line_num++;
	}

	//if (? ? ? )
	{
		// このシーンの状態を最初の状態しておく
		//secen_mode_num = normal;
	}
}

//------------------------------------------
// 会話していない状態の描画処理
//------------------------------------------
void QuestAreaScene::ModeNormalDraw()
{
	// フォントサイズの設定
	SetFontSize(FONT_SIZE);

	// 文字列の高さの取得
	float h = GetFontSize();
	// 目印の描画
	for (int i = 0; i < landmark_text_max; i++)
	{
		if (m_landmark_text[i].draw_flag)
		{
			// 描画幅の取得
			float w = GetDrawStringWidth(m_landmark_text[i].text, -1);
			// 描画座標
			m_landmark_draw_pos = { m_landmark_text[i].draw_pos.x - w / 2,  m_landmark_text[i].draw_pos.y - h };
			// 文字列の描画
			DrawString(m_landmark_draw_pos.x, m_landmark_draw_pos.y, m_landmark_text[i].text, GetColor(255, 128, 50));
		}
	}
	// プレイヤーのテキストの描画
	SetFontSize(TEXT_FONT_SIZE);
	h = GetFontSize();
	m_text_draw_pos.set((SCREEN_W / 2 - m_quest_area_text.TITLE_BACK_HALF_SIZE), (SCREEN_H - (h * 2 + m_quest_area_text.CREVICE_SIZE)));
	m_quest_area_text.TextDraw(m_text_line_num, { m_text_draw_pos.x, (m_text_draw_pos.y + h) }, m_quest_area_text.TITLE_BACK_SIZE);
	DrawString(m_text_draw_pos.x, m_text_draw_pos.y, "Player", GetColor(255, 128, 50));
}

//------------------------------------------
// 会話パートの描画処理
//------------------------------------------
void QuestAreaScene::ConvoDraw()
{
	// 文字列の高さの取得
	float h = GetFontSize();

	h = GetFontSize();
	m_text_draw_pos.set((SCREEN_W / 2 - m_reception_text.QUEST_BACK_HALF_SIZE), (SCREEN_H - (h * 2 + m_reception_text.CREVICE_SIZE)));
	m_reception_text.TextDraw(m_text_line_num, { m_text_draw_pos.x, (m_text_draw_pos.y + h) }, m_reception_text.QUEST_BACK_SIZE);


}

//------------------------------------------
// クエストを受けているときの描画処理
//------------------------------------------
void QuestAreaScene::AcceptingQuestDraw()
{
	// 文字列の高さの取得
	float h = GetFontSize();

	h = GetFontSize();
	m_text_draw_pos.set((SCREEN_W / 2 - m_quest_text.QUEST_BACK_HALF_SIZE), (SCREEN_H - (h * 2 + m_quest_text.CREVICE_SIZE)));
	m_quest_text.TextDraw(m_text_line_num, { m_text_draw_pos.x, (m_text_draw_pos.y + h) }, m_quest_text.QUEST_BACK_SIZE);

}


