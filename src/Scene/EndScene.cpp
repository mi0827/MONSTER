#include "src/WinMain.h"
#include "src/System/Random.h"
#include "src/System/Vector3.h"
#include "src/System/Vector2.h"
#include "src/System/Transform.h"


#include "src/Model/Model.h"
#include "src/Animation/Animation.h"
#include "src/Effect/Effect.h"

#include "src/Collision/BoxCollision.h"
#include "src/Collision/CapsuleCollision.h"
#include "src/Hit/Hit.h"

#include "src/System/UIBar.h"

#include "src/Action/Combo.h"
#include "src/System/Move.h"
#include "src/Character/CharacterBase.h"
#include "src/Character/SamplePlayer.h"

#include "src/Field/FieldBase.h"
#include "src/Field/HitField.h" 
//#include "src/Field/TitleField.h"
#include "src/Field/Field.h"


#include "src/Sound/BGM.h"
#include "src/Sound/SE.h"

#include "src/Camera.h"


#include "src/System/Text.h"
#include "Base/Scene_Base.h"
#include "EndScene.h"


//------------------------------------------
// コンストラクタ
//------------------------------------------
EndScene::EndScene()
{
}

//------------------------------------------
// デストラクタ
//------------------------------------------
EndScene::~EndScene()
{
}

//------------------------------------------
// 初期処理
//------------------------------------------
void EndScene::Init()
{
	// ベースクラスで初期化しておきたいものの初期化
	BaseInit();

	// フィールドの初期化
	field.Init();


	// カメラの初期設定
	camera.PlayField_Init();

	// プレイヤーの設定
	player = new SamplePlayer;

	// プリえやーの初期設定 
	player->Init();

	// シャドーマップの設定
	ShadowMapInit();

	// 現在のシーンの設定(エンドシーン)
	m_now_scene = End;


	// エンドシーンで使う用のテキストの読み込み
	m_text.LoadText("Data/Text/End.txt", text_max);


}


//------------------------------------------
// 更新処理
//------------------------------------------
void EndScene::Update()
{



	switch (m_turn)
	{
	case Main:
		// カメラの向きを取得する
		m_camera_rot = camera.GetCameraRot();
		// プレイヤーの更新処理
		player->Update(&m_camera_rot);
		// カメラの更新処理
		camera.MouseCamera(&player->m_transform.pos);

		// エンターを押された時にシーンの変更をする（今だけの仮）
		if (PushHitKey(KEY_INPUT_RETURN) && CheckHitKey(KEY_INPUT_RSHIFT))
		{
			// 次の移動先のシーンをタイトルシーン設定
			m_change_scene = Title;
			m_turn = FadeOut;
		}

		// エンターを押された時にシーンの変更をする（今だけの仮）
		if (PushHitKey(KEY_INPUT_RETURN) && CheckHitKey(KEY_INPUT_LSHIFT))
		{
			// 次の移動先のシーンをクエスト受付エリアに設定
			m_change_scene = QuestArea;
			m_turn = FadeOut;
		}
		break;
	case FadeOut:
		// フェードアウトの処理
		FadeOutSceneChange(m_change_scene);
		break;
	}


	// フィールドとキャラクターのあたい判定
	HitField();

}

//------------------------------------------
// 描画処理
//------------------------------------------
void EndScene::Draw()
{
	// プレイヤーのシャドーマップのエリアのセット
	SetPlayerShadowMapArea(player->m_transform.pos);

	//-------------------------------------------------------------
		// シャドウマップの作成（ここで各オブジェクトのシャドーマップの設定）
		//-------------------------------------------------------------
		// シャドウマップへの描画の準備
	ShadowMap_DrawSetup(m_player_shadowMap_handle);
	{
		// プレイヤーの描画処理
		player->Draw();

		// ヒーローの描画処理
		//hero.Draw();
	}
	ShadowMap_DrawSetup(m_shadowMap_handle);
	{
		// シャドウマップへキャラクターモデルの描画
		//MV1SetPosition(ground, VGet(0.0f, 0.0f, 0.0f)); // 描画するプレイヤーモデルの座標の設定
		//MV1SetRotationXYZ(ground, VGet(TO_RADIAN(0.0f), TO_RADIAN(0.0f), TO_RADIAN(0.0f))); // モデルの回転
		//MV1SetScale(ground, VGet(10, 10, 10)); // モデルの大きさ(10分の１のサイズ)
		//MV1DrawModel(ground); // モデルの描画
		field.Draw();

	}

	// シャドウマップへの描画を終了
	ShadowMap_DrawEnd();

	//-------------------------------------------------------------
	// 各モデルの描画
	//-------------------------------------------------------------

	// バックバッファに描画する
	SetDrawScreen(DX_SCREEN_BACK);

	// カメラの描画処理
	camera.Draw();


	// 描画に使用するシャドウマップを設定
	SetUseShadowMap(1, m_player_shadowMap_handle);
	{
		player->Draw();

		// ヒーローの描画処理
		//hero.Draw();
	}
	SetUseShadowMap(0, m_shadowMap_handle);
	{
		// シャドウマップへキャラクターモデルの描画
		field.Draw();

	}
	UseShadowMapSet();


	// フォントのデフォルトサイズの保存
	int default_font_size = GetFontSize();
	// フォントサイズの設定
	SetFontSize(60);

	// 文字列の高さの取得
	float h = GetFontSize();
	// 描画座標
	Vector2 draw_pos = { (SCREEN_W / 2 - m_text.END_BACK_HALF_SIZE),(SCREEN_H - h * text_max - m_text.CREVICE_SIZE) };

	for (int i = 0; i < text_max; i++)
	{
		m_text.TextDraw(i, { draw_pos.x,draw_pos.y + h * i }, m_text.END_BACK_SIZE);
	}

	// フォントのサイズをデフォルトサイズに戻す
	SetFontSize(default_font_size);

	// フェードの描画
	FadeDraw();

}

//------------------------------------------
// 終了処理
//------------------------------------------
void EndScene::Exit()
{
	//　シャドーマップの削除
	ExitShadowMap();
	// プレイヤークラスはポインタなので最後に開放する
	delete player;
}

//------------------------------------------
// フィールドとキャラクターの当たり判定
//------------------------------------------
void EndScene::HitField()
{
	// フィールドの地面モデルとキャラクターの当たり判定
	HitGroundCharacter(&player->m_transform.pos, &field.m_field_model);

	// 木のオブジェクトとプレイヤーの当たり判定
	for (int i = 0; i < field.TREE_MAX; i++)
	{
		// モンスターとプレイヤーの移動の当たり判定
		if (CheckCapsuleHit(field.m_hit_tree[i], player->m_body))
		{
			player->m_move.Move_Hit_Capsule(&player->m_transform.pos, player->m_body.m_capsule.radius, &field.m_hit_tree[i]);
		}
	}

	// フェンスとキャラクターの当たり判定
	for (int i = 0; i < field.FENCE_MAX; i++)
	{
		if (CheckBoxHit3D(player->m_transform.pos, player->m_move_hit_size,
			field.m_hit_fence[i].m_box.hit_pos, field.m_hit_fence[i].m_box.half_size))
		{
			player->MoveHitUpdate(&field.m_hit_fence[i]);
		}
	}


	// 石とキャラクターの当たり判定
	for (int i = 0; i < field.STONE_MAX; i++)
	{
		if (CheckBoxHit3D(player->m_transform.pos, player->m_move_hit_size,
			field.m_hit_stone[i].m_box.hit_pos, field.m_hit_stone[i].m_box.half_size))
		{
			player->MoveHitUpdate(&field.m_hit_stone[i]);
		}
	}
}

//------------------------------------------
// オプションメニューでもらってきた値を反映する関数
//------------------------------------------
void EndScene::OptionValuesReflect(int bgm, int se, int mouse)
{
	// カメラの感度設定
	camera.SetCameraSensi(mouse);
}

